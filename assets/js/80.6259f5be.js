(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{439:function(e,t,a){"use strict";a.r(t);var r=a(44),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"http-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[e._v("#")]),e._v(" HTTP 缓存")]),e._v(" "),a("h2",{attrs:{id:"运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[e._v("#")]),e._v(" 运行")]),e._v(" "),a("p",[a("code",[e._v("node main.js")]),e._v("启动验证")]),e._v(" "),a("h2",{attrs:{id:"强制缓存阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存阶段"}},[e._v("#")]),e._v(" 强制缓存阶段")]),e._v(" "),a("p",[a("code",[e._v("Expires: <Date>")]),e._v("：缓存设置过期的绝对时间 HTTP1.0，服务器可能和客户端时间有偏差"),a("br"),e._v(" "),a("code",[e._v("Cache-Control: max-age=2000")]),e._v("：缓存过期的相对时间，优先级更高，单位秒 HTTP1.1优先级更高")]),e._v(" "),a("p",[e._v("当服务端返回了以上响应头的任意一个（如果没有，则进入启发式缓存阶段），客户端请求资源时会验证有没有过期，如果没有，则不会向服务端发送请求。"),a("br"),e._v("\n表现为控制台显示状态码为200，并提示"),a("code",[e._v("memory cache")]),e._v("或"),a("code",[e._v("disk cache")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"启发式缓存阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存阶段"}},[e._v("#")]),e._v(" 启发式缓存阶段")]),e._v(" "),a("p",[e._v("如果服务端没有返回强制缓存阶段的请求头，则进入启发式缓存阶段。"),a("br"),e._v("\n缓存时间 = (Date - Last-Modified) * 0.1。")]),e._v(" "),a("p",[e._v("如果没有Date，则使用客户端的Date"),a("br"),e._v("\n如果返回了Date且与客户端差别太大，直接忽略启发式缓存阶段（或者是启发式缓存阶段算出的缓存时间不能超过某个时间限制？）")]),e._v(" "),a("h2",{attrs:{id:"协商缓存阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存阶段"}},[e._v("#")]),e._v(" 协商缓存阶段")]),e._v(" "),a("p",[a("strong",[e._v("服务端响应")]),a("br"),e._v(" "),a("code",[e._v("ETag: <etag_value>")]),e._v("：对文件的散列运算，优先级更高"),a("br"),e._v(" "),a("code",[e._v("Last-Modified: <Date>")]),e._v(": 最后一次修改时间")]),e._v(" "),a("p",[a("strong",[e._v("客户端请求")]),a("br"),e._v(" "),a("code",[e._v("If-None-Match: <etag_value>")]),e._v("：本地文件得到的散列运算值"),a("br"),e._v(" "),a("code",[e._v("If-Modified-Since: <Date>")]),e._v("：本地文件得到的最后一次修改时间")]),e._v(" "),a("p",[e._v("上面的"),a("code",[e._v("<Date>")]),e._v("是我为了笔记排版"),a("code",[e._v("<day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT")]),e._v("的缩写")]),e._v(" "),a("p",[e._v("如果强制缓存阶段过期，服务端返回了以上两个响应头的任意一个，则进入协商缓存阶段。"),a("br"),e._v("\n客户端使用之前服务端的响应值发送给服务端问一下这个资源是否过期，过期则携带新的"),a("code",[e._v("ETag")]),e._v(" 与 "),a("code",[e._v("Last-Modified")]),e._v("和文件返回给客户端。如果没改，则返回304状态码告诉客户端继续使用。")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("文章参考")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6861528185742295048",target:"_blank",rel:"noopener noreferrer"}},[e._v("http缓存总结及前后端测试"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903556474994695#heading-26",target:"_blank",rel:"noopener noreferrer"}},[e._v("缓存详解"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"todd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#todd"}},[e._v("#")]),e._v(" TODD")]),e._v(" "),a("ul",[a("li",[e._v("[ ] 之前遇到过使用nginx作为前端静态资源服务器，但是本地浏览器会缓存 index.html，今天测试没有缓存，使用nginx复现该问题")]),e._v(" "),a("li",[e._v("[ ] 如过服务端设置了"),a("code",[e._v("Cache-Control: no-cache, must-revalidate, proxy-revalidate, max-age=0")]),e._v("，则不会进入启发式缓存阶段，强制缓存阶段呢？待验证")]),e._v(" "),a("li",[e._v("[ ] "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN HTTP 缓存"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);
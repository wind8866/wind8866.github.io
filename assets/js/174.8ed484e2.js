(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{535:function(t,_,v){"use strict";v.r(_);var e=v(44),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"前端必知的网络相关知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端必知的网络相关知识"}},[t._v("#")]),t._v(" 前端必知的网络相关知识")]),t._v(" "),v("h2",{attrs:{id:"待办"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#待办"}},[t._v("#")]),t._v(" 待办")]),t._v(" "),v("ul",[v("li",[t._v("[ ] "),v("a",{attrs:{href:"https://www.jianshu.com/p/6b502d0f2ede",target:"_blank",rel:"noopener noreferrer"}},[t._v("DNS解析原理:递归 VS 迭代"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("[ ] "),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN HTTP"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("[ ] TCP协议")]),t._v(" "),v("li",[t._v("[ ] 三次握手如果最后一次发送到服务端，连接完成，又有一次被阻塞的请求发送到服务端，这时为什么不会认为是新的连接？")]),t._v(" "),v("li",[t._v("[ ] "),v("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/http2?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 简介"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("[x] "),v("a",{attrs:{href:"https://http2-explained.haxx.se/zh/part1",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP2 教程"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("[x] "),v("a",{attrs:{href:"https://http3-explained.haxx.se/zh/zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP3 教程"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("[x] 更好的理解 HTTP2 中流的概念，和TCP连接的关系。")]),t._v(" "),v("li",[t._v("[x] 所有的网络协议")]),t._v(" "),v("li",[t._v("[x] 跨域")]),t._v(" "),v("li",[t._v("[ ] 浏览器默认头")])]),t._v(" "),v("p",[t._v("必须要完成的待办")]),t._v(" "),v("ul",[v("li",[t._v("[x] HTTP 缓存")]),t._v(" "),v("li",[t._v("[x] HTTPS")]),t._v(" "),v("li",[t._v("[x] HTTP头")]),t._v(" "),v("li",[t._v("[ ] 浏览器中想访问 www.google.com 时，会通过进行什么操作")]),t._v(" "),v("li",[t._v("[ ] fetch 与 xmlHttpRequest 的区别")]),t._v(" "),v("li",[t._v("[ ] 性能优化网络部分")]),t._v(" "),v("li",[t._v("[ ] 如何看懂浏览器控制台的 Network，进行性能分析与优化？")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"基础知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),v("h3",{attrs:{id:"http-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[t._v("#")]),t._v(" HTTP 缓存")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/wind8866/wind8866.io/blob/main/docs/other/http-cache/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("放在其他位置了"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"常用的-http请求头"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用的-http请求头"}},[t._v("#")]),t._v(" 常用的 HTTP请求头")]),t._v(" "),v("ul",[v("li",[t._v("Cache-Control\n"),v("ul",[v("li",[t._v("可缓存性\n"),v("ul",[v("li",[t._v("public：可被任意代理缓存")]),t._v(" "),v("li",[t._v("private：只能由客户端缓存")]),t._v(" "),v("li",[t._v("no-cache：强制进行协商缓存")]),t._v(" "),v("li",[t._v("no-store：不可缓存")])])]),t._v(" "),v("li",[t._v("到期\n"),v("ul",[v("li",[t._v("max-age：多少秒后过期")])])]),t._v(" "),v("li",[t._v("重新验证\n"),v("ul",[v("li",[t._v("must-revalidate：过期后不进行启发式缓存而直接进行协商缓存")])])])])]),t._v(" "),v("li",[t._v("Accept*\n"),v("ul",[v("li",[t._v("以该字符开头的用于客户端与服务端之间协商")])])]),t._v(" "),v("li",[t._v("Authorization\n"),v("ul",[v("li",[t._v("用于包含服务器验证")])])]),t._v(" "),v("li",[t._v("Connection\n"),v("ul",[v("li",[t._v("keep-alive：TCP不关闭")]),t._v(" "),v("li",[t._v("close")])])]),t._v(" "),v("li",[t._v("Content-Encoding\n"),v("ul",[v("li",[t._v("压缩方式")])])]),t._v(" "),v("li",[t._v("Content-Length\n"),v("ul",[v("li",[t._v("指明消息主体的大小")])])]),t._v(" "),v("li",[t._v("Content-Type\n"),v("ul",[v("li",[t._v("用于指示资源类型")]),t._v(" "),v("li",[t._v("application/x-www-form-urlencoded：默认表单qs.stringify")]),t._v(" "),v("li",[t._v("multipart/form-data：常用表单，new FormData")]),t._v(" "),v("li",[t._v("application/json: JSON")]),t._v(" "),v("li",[t._v("text/html; charset=utf-8")]),t._v(" "),v("li",[t._v("text/plain, text/html, text/css, text/javascript")]),t._v(" "),v("li",[t._v("image/gif, image/png, image/jpeg, image/webp")]),t._v(" "),v("li",[t._v("audio/"),v("em",[t._v("、video/")])]),t._v(" "),v("li",[t._v("application/pdf：二进制")])])]),t._v(" "),v("li",[t._v("Cookie\n"),v("ul",[v("li",[t._v("name=value; name2=value2; name3=value3")])])]),t._v(" "),v("li",[t._v("Date\n"),v("ul",[v("li",[t._v("消息产生时间（服务器时间）")])])]),t._v(" "),v("li",[t._v("ETag\n"),v("ul",[v("li",[t._v("散列值")]),t._v(" "),v("li",[t._v("W/开头是弱校验")])])]),t._v(" "),v("li",[t._v("Expires\n"),v("ul",[v("li",[t._v("强制缓存阶段，时间戳")])])]),t._v(" "),v("li",[t._v("Host\n"),v("ul",[v("li",[t._v("host:port")])])]),t._v(" "),v("li",[t._v("If-Modified-Since\n"),v("ul",[v("li",[t._v("协商缓存阶段，本地文件得到的最后一次修改时间，没修改302")])])]),t._v(" "),v("li",[t._v("If-Unmodified-Since\n"),v("ul",[v("li",[t._v("本地文件的最后时间，一般用于断点续传，修改了412，没修改200并继续传输")])])]),t._v(" "),v("li",[t._v("If-None-Match\n"),v("ul",[v("li",[t._v("协商缓存阶段，本地文件得到的散列运算值")])])]),t._v(" "),v("li",[t._v("Last-Modified\n"),v("ul",[v("li",[t._v("协商缓存阶段，最后一次修改时间")])])]),t._v(" "),v("li",[t._v("Location\n"),v("ul",[v("li",[t._v("重定向到xxx，301、302才返回")])])]),t._v(" "),v("li",[t._v("Referer\n"),v("ul",[v("li",[t._v("请求的来源页面")])])]),t._v(" "),v("li",[t._v("Server\n"),v("ul",[v("li",[t._v("服务器名")])])]),t._v(" "),v("li",[t._v("Set-Cookie\n"),v("ul",[v("li",[v("code",[t._v("<cookie-name>=<cookie-value>")])]),t._v(" "),v("li",[v("code",[t._v("HttpOnly")]),t._v("：设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由  Document.cookie 属性、XMLHttpRequest 和  Request APIs 进行访问，以防范跨站脚本攻击（XSS (en-US)）")]),t._v(" "),v("li",[t._v("示例：Set-Cookie: sessionid=38afes7a8; HttpOnly")]),t._v(" "),v("li",[v("code",[t._v("Expires=<date>")]),t._v("：cookie 的最长有效时间，如果没有设置这个属性，那么表示这是一个会话期 cookie 。一个会话结束于客户端被关闭时，这意味着会话期 cookie 在彼时会被移除。不过浏览器一般会保留")]),t._v(" "),v("li",[v("code",[t._v("Max-Age=<non-zero-digit>")]),t._v("：经过多少秒后过期")]),t._v(" "),v("li",[v("code",[t._v("Domain=<domain-value>")]),t._v("：指定 cookie 可以送达的主机名")]),t._v(" "),v("li",[v("code",[t._v("Path=<path-value>")]),t._v("：指定一个 URL 路径，这个路径必须出现在要请求的资源的路径中才可以发送 Cookie 首部。")]),t._v(" "),v("li",[v("code",[t._v("Secure")]),t._v("：一个带有安全属性的 cookie 只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器。")])])]),t._v(" "),v("li",[t._v("Upgrade\n"),v("ul",[v("li",[t._v("列出客户端支持的协议供服务端选择")])])])]),t._v(" "),v("h3",{attrs:{id:"dns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[t._v("#")]),t._v(" DNS")]),t._v(" "),v("p",[t._v("DNS 查询有两种方式，递归和迭代，当操作系统设置了 DNS 服务器的话，使用迭代。默认情况下使用递归。"),v("br"),t._v("\nDNS 查询是TCP和UDP都用"),v("br"),t._v("\n为什么是三次握手而不是两次，三次可以防止失效的连接请求报文被服务端接收。第一次就携带数据A，慢了，客户端重传B，B正常且关闭了，这时A才到就不好了，客户端已经关闭。")]),t._v(" "),v("h3",{attrs:{id:"https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),v("p",[t._v("参考："),v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/43789231",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂HTTPS的加密原理"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("对称加密：使用相同的密钥进行加密解密，性能好"),v("br"),t._v("\n非对称加密：分私钥和公钥，公钥可以公开，需要加密的东西用公钥加密，用私钥解开。私钥一定要保留好，非对称加密性能不好。")]),t._v(" "),v("p",[t._v("HTTPS加密过程的设计思路")]),t._v(" "),v("h4",{attrs:{id:"推导过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#推导过程"}},[t._v("#")]),t._v(" 推导过程")]),t._v(" "),v("h5",{attrs:{id:"_1、无任何加密"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、无任何加密"}},[t._v("#")]),t._v(" 1、无任何加密")]),t._v(" "),v("p",[t._v("中间人很容易获取、伪造请求")]),t._v(" "),v("h5",{attrs:{id:"_2、使用对称加密"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用对称加密"}},[t._v("#")]),t._v(" 2、使用对称加密")]),t._v(" "),v("p",[t._v("无法将密钥发送给对方，直接发送会被拦截")]),t._v(" "),v("h5",{attrs:{id:"_3、非对称加密"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、非对称加密"}},[t._v("#")]),t._v(" 3、非对称加密")]),t._v(" "),v("p",[t._v("过程：客户端A和服务端B都将自己的公钥发送给对方，各自使用对方的公钥加密数据传输给对方，各自用自己的私钥解密对方发送的数据。"),v("br"),t._v("\n缺点：1、非对称加密需要消耗更多的系统资源。在AB双方发送公钥时中间人X可以拦截并伪造公钥，两边无法感知公钥是被替换。")]),t._v(" "),v("h5",{attrs:{id:"_4、混合加密"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、混合加密"}},[t._v("#")]),t._v(" 4、混合加密")]),t._v(" "),v("p",[t._v("解决了非对产加密资源消耗问题，但不能解决中间人拦截问题。"),v("br"),t._v("\n到这里我们解决了窃听的问题，因为如果不进行中间人拦截，中间的x是无法解密获得数据的。")]),t._v(" "),v("h5",{attrs:{id:"_5、数字证书"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、数字证书"}},[t._v("#")]),t._v(" 5、数字证书")]),t._v(" "),v("p",[t._v("其实就是AB双方都找一个双方都信任的“公正的中间人”（后面都成为认证机构），这个认证机构帮助双方解决中间人拦截问题。")]),t._v(" "),v("p",[v("strong",[t._v("数字申请证书过程：")]),v("br"),t._v("\n1、网站 b.com 提供自己的域名信息（DV SSL证书）给认证机构"),v("br"),t._v("\n2、认证机构对提供的信息散列计算（提高效率）后使用自己的私钥进行加密，生成数字签名。数字证书 = 数字签名 + 网站的信息（b.com + b的公钥）"),v("br"),t._v("\n3、网站 b.com 接收到证书存在服务器中")]),t._v(" "),v("p",[v("strong",[t._v("得到对称加密私钥的过程：")])]),t._v(" "),v("ol",[v("li",[t._v("客户端a访问 b.com/index.html，如果是https开头（b需要配置非HTTS的都跳到HTTPS）先进行TSL的握手")]),t._v(" "),v("li",[t._v("b.com 返回数字证书")]),t._v(" "),v("li",[t._v("a对证书的正确性进行验证\n"),v("ol",[v("li",[t._v("a查看证书的签名与自己想要访问的是否一致（防止调包）")]),t._v(" "),v("li",[t._v("a先对证书信息进行散列（方法在证书中有体现）")]),t._v(" "),v("li",[t._v("拿证书签发机构的公钥（一般保存在浏览器或操作系统）解密数字签名")]),t._v(" "),v("li",[t._v("对比生成的散列值（防止篡改），如果一致，证明证书是正确的（证明公钥是b的）")])])]),t._v(" "),v("li",[t._v("a随机生成一个对称加密的密钥，使用证书里的公钥加密密钥，发送给b")]),t._v(" "),v("li",[t._v("b使用自己的私钥解密信息，拿到对称加密的密钥")]),t._v(" "),v("li",[t._v("ab都拿到了对称加密的密钥，两者都使用对称加密进行数据传输")])]),t._v(" "),v("h4",{attrs:{id:"延伸问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#延伸问题"}},[t._v("#")]),t._v(" 延伸问题：")]),t._v(" "),v("p",[v("strong",[t._v("客户端如何确定签发机构的权威性？")]),v("br"),t._v("\n操作系统、浏览器本身会预装一些它们信任的根证书，如果其中会有CA机构的根证书，这样就可以拿到它对应的可信公钥了。")]),t._v(" "),v("p",[v("strong",[t._v("证书类型有哪些")]),v("br"),t._v("\nDV SSL证书（域名验证型）：只需验证域名所有权，无需人工验证申请单位真实身份，几分钟就可颁发的SSL证书。价格一般在百元至千元左右，适用于个人或者小型网站。也有免费的")]),t._v(" "),v("p",[t._v("OV SSL证书（企业验证型）：需要验证域名所有权以及企业身份信息，证明申请单位是一个合法存在的真实实体，一般在1~5个工作日颁发。价格一般在百元至千元左右，适用于企业型用户申请。")]),t._v(" "),v("p",[t._v("EV SSL证书（扩展验证型）：除了需要验证域名所有权以及企业身份信息之外，还需要提交一下扩展型验证，比如：邓白氏等，通常CA机构还会进行电话回访，一般在2~7个工作日颁发证书。价格一般在千元至万元左右，适用于在线交易网站、企业型网站。")]),t._v(" "),v("h3",{attrs:{id:"http2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://http2-explained.haxx.se/zh/part8",target:"_blank",rel:"noopener noreferrer"}},[t._v("《http2的世界》"),v("OutboundLink")],1),v("br"),t._v(" "),v("a",{attrs:{href:"https://httparchive.org/reports/state-of-the-web#h2",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP2现在请求数量占比"),v("OutboundLink")],1),t._v("：21年7月达到66%")]),t._v(" "),v("p",[v("strong",[t._v("网页中存在的问题")])]),t._v(" "),v("ul",[v("li",[t._v("传输大小逐渐增加")]),t._v(" "),v("li",[t._v("传输数量不断增加：浏览器的同时只能6个请求的限制")]),t._v(" "),v("li",[t._v("延迟高，HTTP pipelining有问题（多个HTTP请求放入一个TCP里面一起发送）")]),t._v(" "),v("li",[t._v("线头阻塞：HTTP2解决的是HTTP层面的线头阻塞，因为浏览器的限制。而（"),v("a",{attrs:{href:"https://www.zhihu.com/question/65900752",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP的线头阻塞"),v("OutboundLink")],1),t._v("，3使用了UDP才解决）")])]),t._v(" "),v("p",[t._v("线头阻塞：TCP 的阻塞问题是因为传输阶段可能会丢包，一旦丢包就会等待重新发包，阻塞后续传输，这个问题虽然有滑动窗口（Sliding Window）这个方案，但是只能增强抗干扰，并没有彻底解决。")]),t._v(" "),v("p",[v("strong",[t._v("解决方案：")]),v("br"),t._v("\n雪碧图、文字图标、内联"),v("br"),t._v("\n文本拼接（多个资源放入一个文件中）"),v("br"),t._v("\n分片：将资源放入子域名的不同网站")]),t._v(" "),v("p",[v("strong",[t._v("HTTP2 与 HTTP1.x 的兼容：")]),v("br"),t._v("\nALPN协议：客户端会提供一个列表列出所支持的协议供服务端挑选一个。"),v("br"),t._v("\n在浏览器端，HTTP2 必须是 HTTPS 的。"),v("br"),t._v("\nwinddows 10 上的 IE 支持 HTTP2")]),t._v(" "),v("p",[v("strong",[t._v("升级到HTTP2后不应该有的优化")])]),t._v(" "),v("ul",[v("li",[t._v("域名散列\n"),v("ul",[v("li",[t._v("HTTP2针对同一域名只使用一个 TCP 连接")]),t._v(" "),v("li",[t._v("域名散列会导致更多的 TCP 连接，浪费 CPU与内存")]),t._v(" "),v("li",[t._v("散列会破坏 HTTP2 的优先级，降低头部压缩效果")])])]),t._v(" "),v("li",[t._v("资源合并\n"),v("ul",[v("li",[t._v("资源合并会造成缓存利用率低，增加系统复杂性")]),t._v(" "),v("li",[t._v("资源合并会浪费CPU 和内存")])])]),t._v(" "),v("li",[t._v("资源内联\n"),v("ul",[v("li",[t._v("可以在发送页面之前使服务端推送必要资源")]),t._v(" "),v("li",[t._v("无法利用缓存")]),t._v(" "),v("li",[t._v("多次内联无法复用"),v("br"),t._v("\n来自："),v("a",{attrs:{href:"https://imququ.com/post/http2-new-opportunities-and-challenges.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《HTTP/2：新的机遇与挑战》"),v("OutboundLink")],1)])])])]),t._v(" "),v("h3",{attrs:{id:"http3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/HTTP/3",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki"),v("OutboundLink")],1),v("br"),t._v(" "),v("a",{attrs:{href:"https://httparchive.org/reports/state-of-the-web#h3",target:"_blank",rel:"noopener noreferrer"}},[t._v("现支持率"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("TCP是一个按序传输的链条，如果HTTP/2连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因此如果其中一个点丢失了，链路上之后的内容就都需要等待。"),v("br"),t._v("\n这种单个数据包造成的阻塞，就是TCP上的队头阻塞（head of line blocking）。"),v("br"),t._v("\nQUIC 是 HTTP3 的前身，QUIC 开始只支持 HTTP，是UDP协议上的一个协议，可完全替代 TCP的部分、TLS、HTTP。后来标准化组织介入。将QUIC分为两层：QUIC、HTTP over QUIC。HTTP over QUIC 就是后来的 HTTP3。"),v("br"),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/wind8866/storage/master/img/quic-stack.png",alt:"HTTP3 QUIC关系图"}}),v("br"),t._v(" "),v("em",[v("a",{attrs:{href:"https://http3-explained.haxx.se/zh/the-protocol",target:"_blank",rel:"noopener noreferrer"}},[t._v("架构图来自HTTP3教程"),v("OutboundLink")],1)]),v("br"),t._v("\nHTTP3现在（2021年6月）仍是草案，且"),v("a",{attrs:{href:"https://http3-explained.haxx.se/zh/criticism",target:"_blank",rel:"noopener noreferrer"}},[t._v("弊端"),v("OutboundLink")],1),t._v("很多，先不过多研究")]),t._v(" "),v("h3",{attrs:{id:"其他协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他协议"}},[t._v("#")]),t._v(" 其他协议")]),t._v(" "),v("p",[v("strong",[t._v("WebSocket协议")]),v("br"),t._v(" "),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/WebSocket",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki"),v("OutboundLink")],1),v("br"),t._v("\n浏览器和服务器只需要完成一次握手，两者之间就可以建立持久性的连接，并进行双向数据传输。"),v("br"),t._v("\nWebSocket 握手使用 HTTP，一旦握手完成，后续数据直接在TCP上传输"),v("br"),t._v("\n也使用80端口")]),t._v(" "),v("p",[v("strong",[t._v("webRTC 协议")]),v("br"),t._v(" "),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/WebRTC",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki"),v("OutboundLink")],1),v("br"),t._v("\n用于视频会议、视频通话等"),v("br"),t._v("\n建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。"),v("br"),t._v("\n基于UDP")]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"常见的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的问题"}},[t._v("#")]),t._v(" 常见的问题")]),t._v(" "),v("h4",{attrs:{id:"常见的-http响应的状态码有哪些-有什么作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的-http响应的状态码有哪些-有什么作用"}},[t._v("#")]),t._v(" 常见的 HTTP响应的状态码有哪些，有什么作用")]),t._v(" "),v("ul",[v("li",[t._v("10x 信息")]),t._v(" "),v("li",[t._v("20x 成功\n"),v("ul",[v("li",[t._v("200 成功")])])]),t._v(" "),v("li",[t._v("30x 重定向\n"),v("ul",[v("li",[t._v("301 永久重定向")]),t._v(" "),v("li",[t._v("302 临时重定向")]),t._v(" "),v("li",[t._v("304 无修改【特殊，可归到成功一类】")])])]),t._v(" "),v("li",[t._v("40x 客户端错误\n"),v("ul",[v("li",[t._v("403 拒绝执行")]),t._v(" "),v("li",[t._v("404 找不到")]),t._v(" "),v("li",[t._v("405 方法被禁止")])])]),t._v(" "),v("li",[t._v("50x 服务端错误\n"),v("ul",[v("li",[t._v("500 服务器未知错误")]),t._v(" "),v("li",[t._v("502 无响应")]),t._v(" "),v("li",[t._v("504 超时")])])])]),t._v(" "),v("h5",{attrs:{id:"浏览器中输入-google-com-后会发生什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中输入-google-com-后会发生什么"}},[t._v("#")]),t._v(" 浏览器中输入 google.com 后会发生什么？")]),t._v(" "),v("ol",[v("li",[t._v("获取IP地址\n"),v("ol",[v("li",[t._v("查找缓存（浏览器、操作系统、Host 文件）")]),t._v(" "),v("li",[t._v("去 DNS 服务器查询（递归查询）")])])]),t._v(" "),v("li",[t._v("TCP 三次握手建立连接\n"),v("ol",[v("li",[t._v("请求建立连接 SYN，协商状态")]),t._v(" "),v("li",[t._v("响应，告诉客户端信息，SYN、ACK")]),t._v(" "),v("li",[t._v("发送数据")])])])]),t._v(" "),v("h4",{attrs:{id:"常用的http请求头有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用的http请求头有哪些"}},[t._v("#")]),t._v(" 常用的HTTP请求头有哪些？")]),t._v(" "),v("p",[t._v("参考知识部分说出必要的即可")]),t._v(" "),v("h4",{attrs:{id:"http2-与-http1-1-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2-与-http1-1-区别"}},[t._v("#")]),t._v(" HTTP2 与 HTTP1.1 区别")]),t._v(" "),v("p",[t._v("HTTP 2 使用二进制数据传输"),v("br"),t._v("\nHTTP2 可以压缩请求头，会最大可能的复用请求头（相同的请求头只发送一次）。"),v("br"),t._v("\n可以告诉服务端优先处理哪些资源"),v("br"),t._v("\n浏览器端只实现了 基于 TSL 的 HTTP2，所以浏览器上使用的HTTP2都是HTTPS"),v("br"),t._v("\n在需要修改 Content-Length 时，可以发送一个值告诉另一端取消请求，避免资源浪费"),v("br"),t._v("\n服务端推送"),v("br"),t._v("\n控制流量"),v("br"),t._v("\nHTTP1.x 的规范都是松散的可选的，而 HTTP2 中补充的的协议都是是强制的。")]),t._v(" "),v("h4",{attrs:{id:"http3-与-http2-有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http3-与-http2-有什么区别"}},[t._v("#")]),t._v(" HTTP3 与 HTTP2 有什么区别")]),t._v(" "),v("p",[t._v("HTTP3 使用基于UDP的QUIC协议实现，解决了TCP协议中的队头阻塞问题。"),v("br"),t._v(" "),v("a",{attrs:{href:"https://http3-explained.haxx.se/zh/h3/h3-h2#bu-tong-zhi-chu",target:"_blank",rel:"noopener noreferrer"}},[t._v("区别"),v("OutboundLink")],1),t._v("："),v("br"),t._v("\n握手速度提升、更早的发送数据、必须为HTTPS")]),t._v(" "),v("h4",{attrs:{id:"浏览器与服务器建立一个tcp连接后-是否会在完成一个http请求后断开-什么条件下会断开"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器与服务器建立一个tcp连接后-是否会在完成一个http请求后断开-什么条件下会断开"}},[t._v("#")]),t._v(" 浏览器与服务器建立一个TCP连接后，是否会在完成一个HTTP请求后断开？什么条件下会断开？")]),t._v(" "),v("p",[t._v("会"),v("br"),t._v("\n使用 "),v("code",[t._v("Connection: keep-alive")]),t._v(" 后不会断开")]),t._v(" "),v("h4",{attrs:{id:"如何突破浏览器最多只能同时发送6个请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何突破浏览器最多只能同时发送6个请求"}},[t._v("#")]),t._v(" 如何突破浏览器最多只能同时发送6个请求？")]),t._v(" "),v("p",[t._v("升级 HTTP2"),v("br"),t._v("\n将资源放到不同的域名下。")]),t._v(" "),v("p",[t._v("相关问题：网页中的图片资源为什么分放在不同的域名下?"),v("br"),t._v("\n答：浏览器对一个域名内的并发请求做了限制，一般支持6个 TCP 请求，而 HTTP1.1 协议下同一时间，一个TCP请求只能有一个HTTP连接。为了更多的并行加载资源，会放到不通的域名下。")]),t._v(" "),v("p",[t._v("相关问题：为什么浏览器会有限制？"),v("br"),t._v("\n好像是因为建立TCP连接消耗挺大")]),t._v(" "),v("h4",{attrs:{id:"如何跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何跨域"}},[t._v("#")]),t._v(" 如何跨域")]),t._v(" "),v("p",[t._v("1、web静态服务器配置代理：nginx配置"),v("code",[t._v("proxy_pass")]),v("br"),t._v("\n2、服务端（后端）配置 "),v("code",[t._v("Access-Control-Allow-Origin")]),v("br"),t._v("\n3、JSONP：利用script不会被限制的规则"),v("br"),t._v("\n4、WebSocket"),v("br"),t._v("\n5、postMessage"),v("br"),t._v("\n6、等等")]),t._v(" "),v("h4",{attrs:{id:"put-和-post-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#put-和-post-区别"}},[t._v("#")]),t._v(" PUT 和 POST 区别")]),t._v(" "),v("p",[t._v("这个问题有很多争议，且两者的区别很小。"),v("br"),t._v("\n创建一个帖子时：")]),t._v(" "),v("ul",[v("li",[t._v("如果你的帖子命名由服务器决定，使用POST，否则使用PUT")]),t._v(" "),v("li",[t._v("PUT是幂等的，PUT一个对象两次，不应该有任何影响。（可以理解为两次请求不会产生两个帖子）"),v("br"),t._v(" "),v("a",{attrs:{href:"https://stackoverflow.com/questions/630453/what-is-the-difference-between-post-and-put-in-http",target:"_blank",rel:"noopener noreferrer"}},[t._v("更详细的解释"),v("OutboundLink")],1)])]),t._v(" "),v("h4",{attrs:{id:"post-与-get-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#post-与-get-的区别"}},[t._v("#")]),t._v(" POST 与 GET 的区别")]),t._v(" "),v("p",[t._v("在TCP网络请求层面，几乎没有任何区别，只有 method 一个是 POST，一个是 GET。"),v("br"),t._v("\n但是协议中约定了一些规则，这些约定使客户端和服务端有了一些现成的实现。"),v("br"),t._v("\n一般 GET 用于获取数据，POST用于新增或更改数据。但这不是强制的，POST也可以进行数据查询。一般情况下 GET 的请求条件放在URL中，但是URL有长度限制。我们可以使用POST放在请求体中。")]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("其他参考资料")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://juejin.cn/post/6844903918820917255",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器HTTP请求并发数和TCP连接的关系"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/tG6HPSuGEOxpS9lq-Q_uLg",target:"_blank",rel:"noopener noreferrer"}},[t._v("揭秘http2"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://imququ.com/post/series.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 相关"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);
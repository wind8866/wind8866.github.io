(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{372:function(_,v,r){"use strict";r.r(v);var a=r(44),t=Object(a.a)({},(function(){var _=this,v=_.$createElement,r=_._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h2",{attrs:{id:"学习方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#学习方法"}},[_._v("#")]),_._v(" 学习方法")]),_._v(" "),r("ul",[r("li",[_._v("[ ] 集中把本周的内容涉及的数据结构和算法，全都自己写出来，用代码实现一遍。")]),_._v(" "),r("li",[_._v("[ ] 完成课后思考")]),_._v(" "),r("li",[_._v("[ ] 提出问题：能解决的解决，不能解决的记录")])]),_._v(" "),r("hr"),_._v(" "),r("h2",{attrs:{id:"资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[_._v("#")]),_._v(" 资料")]),_._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/wangzheng0822",target:"_blank",rel:"noopener noreferrer"}},[_._v("不同数据类型的不同语言实现"),r("OutboundLink")],1)]),_._v(" "),r("hr"),_._v(" "),r("blockquote",[r("p",[_._v("入门篇")])]),_._v(" "),r("h2",{attrs:{id:"学习方法-01、02节"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#学习方法-01、02节"}},[_._v("#")]),_._v(" 学习方法（01、02节）")]),_._v(" "),r("p",[_._v("数据结构和算法这个东西，如果你不去学，可能真的这辈子都用不到，也感受不到它的好。但是一旦掌握，你就会常常被它的强大威力所折服。之前你可能需要费很大劲儿来优化的代码，需要花很多心思来设计的架构，用了数据结构和算法之后，很容易就可以解决了。"),r("br"),_._v("\n学习要学会找重点。如果不分重点地学习，眉毛胡子一把抓，学起来肯定会比较吃力。"),r("br"),_._v("\n要学习它的“来历”“自身的特点”“适合解决的问题”以及“实际的应用场景”。"),r("br"),_._v("\n集中把这周的三节内容涉及的数据结构和算法，全都自己写出来，用代码实现一遍。"),r("br"),_._v("\n如果是应对国内公司的技术面试，即便是 BAT 这样的公司，你只要彻底掌握这个专栏的内容，就足以应对。"),r("br"),_._v("\n学习知识的过程是反复迭代、不断沉淀的过程。")]),_._v(" "),r("h2",{attrs:{id:"_02"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_02"}},[_._v("#")]),_._v(" 02")]),_._v(" "),r("p",[_._v("从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。"),r("br"),_._v("\n复杂度分析：熟练"),r("br"),_._v("\n10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；"),r("br"),_._v("\n10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。")]),_._v(" "),r("p",[r("strong",[_._v("思考：你自己的学习方法")]),r("br"),_._v("\n在上面的学习方法段落")]),_._v(" "),r("hr"),_._v(" "),r("h3",{attrs:{id:"时间-空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时间-空间复杂度"}},[_._v("#")]),_._v(" 时间/空间复杂度")]),_._v(" "),r("p",[_._v("事后统计法：依赖测试环境、受数据规模的影响"),r("br"),_._v("\n大 O 复杂度表示法可以是我们刨除所有其他的外来变量影响，只对代码进行粗略的评估。"),r("br"),_._v("\n大 O 复杂度表示法只考虑每行代码的执行的消耗时间T(n)与代码执行次数f(n)的关系。"),r("br"),_._v("\n大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示"),r("strong",[_._v("代码执行时间随数据规模增长的变化趋势")]),_._v("，公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。")]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[_._v("T(n) = O(f(n))\nT(n) = O(2n^2 + 2n + 3)\nT(n) = O(n^2)\n")])])]),r("ol",[r("li",[_._v("只关注循环执行次数最多的一段代码")]),_._v(" "),r("li",[_._v("加法法则：总复杂度等于量级最大的那段代码的复杂度")]),_._v(" "),r("li",[_._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")])]),_._v(" "),r("p",[_._v("O(1)常量级时间复杂度"),r("br"),_._v("\nO(logn)、O(nlogn)对数级时间复杂度"),r("br"),_._v("\nO(m+n)、O(m*n)由数据规模决定"),r("br"),_._v("\nO(n2)、O(n3)"),r("br"),_._v(" "),r("code",[_._v("![坐标系](./assets/坐标系.webp)")])]),_._v(" "),r("p",[_._v("空间复杂度：存储空间与数据规模之间的增长关系。")]),_._v(" "),r("p",[r("strong",[_._v("思考：有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？")]),r("br"),_._v("\n性能测试提供真实的执行时间，帮助我们缩小可能出现性能瓶颈的位置，而时间、空间复杂度分析提供理论上的支持，是我们努力的方向。"),r("br"),_._v('\n开发时"浪费"的时间与空间，最终都会在实际运行时为我们节省时间与空间成本。')]),_._v(" "),r("h3",{attrs:{id:"最好、最坏、平均、平摊时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最好、最坏、平均、平摊时间复杂度"}},[_._v("#")]),_._v(" 最好、最坏、平均、平摊时间复杂度")]),_._v(" "),r("p",[_._v("最好时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。"),r("br"),_._v("\n最坏时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。")]),_._v(" "),r("ul",[r("li",[_._v("[ ] 平均时间复杂度"),r("br"),_._v("\n均摊时间复杂度：把耗时多的那次操作均摊到耗时少的操作上"),r("br"),_._v("\n只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。")])]),_._v(" "),r("h4",{attrs:{id:"思考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[_._v("#")]),_._v(" 思考：")]),_._v(" "),r("p",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/40447",target:"_blank",rel:"noopener noreferrer"}},[_._v("add函数的时间复杂度"),r("OutboundLink")],1),r("br"),_._v("\n平时是O(1)，特殊是O(n)。所以最好是O(1)，最坏是(n)，均摊是O(1)")]),_._v(" "),r("hr"),_._v(" "),r("blockquote",[r("p",[_._v("基础篇")])]),_._v(" "),r("h2",{attrs:{id:"数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[_._v("#")]),_._v(" 数组")]),_._v(" "),r("p",[_._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。"),r("br"),_._v(" "),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b6/77/b6b71ec46935130dff5c4b62cf273477.jpg",alt:"线性表"}})]),_._v(" "),r("p",[_._v("当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址。"),r("br"),_._v("\n数组的访问越界问题")]),_._v(" "),r("p",[_._v("数组的插入、删除也有相对来说简单的操作，把新插入的元素放到k位置，原来第k个位置的数放到位置n。删除也是，删除某个元素，该位置就空着（用一个特殊的值去记录以保证数据的连续性）。时间复杂度会降低为O(1)。"),r("br"),_._v("\n还有种方法是多次删除仅为标记，异步执行真正的删除操作。")]),_._v(" "),r("p",[_._v("线性表：只有前后两个方向"),r("br"),_._v("\n为什么数组从零开始编号，下标是数组首地址的偏移，从0开始更方便。")]),_._v(" "),r("h4",{attrs:{id:"应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[_._v("#")]),_._v(" 应用")]),_._v(" "),r("p",[r("strong",[_._v("为什么很多编程语言中数组都从0开始编号？")]),r("br"),_._v("\n通过数组下标访问数组内的某个元素，其实是计算数组及下标偏移量，如果以1开始下标那么每次访问"),r("code",[_._v("arr[i]")]),_._v("时需要根据 "),r("code",[_._v("arr")]),_._v(" 的内存地址加上 "),r("code",[_._v("i - 1")]),_._v(" 个偏移量。更可能的原因是以后的编程语言只是模仿C语言，减少学习成本。")]),_._v(" "),r("p",[r("strong",[_._v("JVM 标记清除垃圾回收算法的核心思想")])]),_._v(" "),r("p",[r("strong",[_._v("Java语言中，什么时候用数组，什么时候用容器")])]),_._v(" "),r("h4",{attrs:{id:"问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[_._v("#")]),_._v(" 问题")]),_._v(" "),r("ul",[r("li",[_._v("[ ] 在 JavaScript 这种类似的弱类型语言中，数组内的值可以是任意类型，JS如何为数组分配内存空间。")])]),_._v(" "),r("h4",{attrs:{id:"思考-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思考-2"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),r("ul",[r("li",[_._v("[ ] 1、前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。"),r("br"),_._v("\n2、前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？")])]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[_._v("// 一维数组\na[k]_address = base_address + k * type_size\n\n// 二维数组(假设每个一维数组的长度相同，且为n)\na[j][k]_address = base_address + ( n * j + k) * type_size\n")])])]),r("h2",{attrs:{id:"链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[_._v("#")]),_._v(" 链表")]),_._v(" "),r("p",[_._v("数组：")]),_._v(" "),r("ul",[r("li",[_._v("需要连续空间、对内存要求比较高。")]),_._v(" "),r("li",[_._v("扩容麻烦，需要 O(n) 的时间复杂度计算。")]),_._v(" "),r("li",[_._v("占用内存更小。")])]),_._v(" "),r("p",[_._v("链表：")]),_._v(" "),r("ul",[r("li",[_._v("内存要求低，但是容易形成内存碎片。")]),_._v(" "),r("li",[_._v("天然支持动态扩容。")]),_._v(" "),r("li",[_._v("占用内存更大。")])]),_._v(" "),r("p",[_._v("单链表：第一个节点叫头节点，记录链表基地址，最后一个节点叫尾节点，指向空地址NULL。"),r("br"),_._v("\n双向链表：使得能够获取到当前节点的前一个节点的时间复杂度为O(1)，应用更广泛。"),r("br"),_._v("\n循环链表：尾指向头")]),_._v(" "),r("p",[_._v("空间换时间的设计思想。"),r("br"),_._v("\n在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。")]),_._v(" "),r("h4",{attrs:{id:"应用-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用-2"}},[_._v("#")]),_._v(" 应用")]),_._v(" "),r("p",[r("strong",[_._v("谍战片里的不同接头人之间的关系最好使用单向链表这种数据结构")]),r("br"),_._v("\n组织级别最高的人为链表的头，组织级别最低的人为链表的尾。可以即使策反了级别低的人，也很难向上查找找到更高级别的人。这里只考虑的每个节点只有一人，如果一个人对应多个人，那么就是单向树（如果有）这种数据结构。")]),_._v(" "),r("p",[r("strong",[_._v("如何用链表来实现 LRU 缓存淘汰策略呢？")])]),_._v(" "),r("ul",[r("li",[_._v("[ ] "),r("strong",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[_._v("约瑟夫问题"),r("OutboundLink")],1)]),_._v(" 使用双向链表")])]),_._v(" "),r("p",[_._v("技巧：")]),_._v(" "),r("ul",[r("li",[_._v("理解指针和引用的含义：实际操作用用到的，不能直接将 "),r("code",[_._v("linkList.next")]),_._v(" 赋值给 "),r("code",[_._v("temp")]),_._v("，应该只在"),r("code",[_._v("temp")]),_._v("上操作")]),_._v(" "),r("li",[_._v("警惕指针丢失和内存泄漏")]),_._v(" "),r("li",[_._v("利用哨兵简化实现难度")]),_._v(" "),r("li",[_._v("重点留意边界条件处理\n"),r("ul",[r("li",[_._v("如果链表为空时，代码是否能正常工作？")]),_._v(" "),r("li",[_._v("如果链表只包含一个结点时，代码是否能正常工作？")]),_._v(" "),r("li",[_._v("如果链表只包含两个结点时，代码是否能正常工作？")]),_._v(" "),r("li",[_._v("代码逻辑在处理头结点和尾结点的时候，是否能正常工作？")])])]),_._v(" "),r("li",[_._v("举例画图，辅助思考")]),_._v(" "),r("li",[_._v("多写多练，没有捷径")])]),_._v(" "),r("h4",{attrs:{id:"问题-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题-2"}},[_._v("#")]),_._v(" 问题")]),_._v(" "),r("h4",{attrs:{id:"思考-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思考-3"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("[ ] "),r("strong",[_._v("请分别使用链表、数组实现 LRU 缓存淘汰策略。")])])]),_._v(" "),r("li",[r("p",[_._v("[ ] "),r("strong",[_._v("如何判断一个字符串是否是回文字符串的问题，")])])]),_._v(" "),r("li",[r("p",[_._v("[ ] "),r("strong",[_._v("如果字符串是通过单链表来存储的，那该如何来判断是一个回文串呢？你有什么好的解决思路呢？相应的时间空间复杂度又是多少呢？")])])]),_._v(" "),r("li",[r("p",[_._v("[ ] "),r("strong",[_._v("将反转列表功能加入到代码中")])])]),_._v(" "),r("li",[r("p",[_._v("[ ] 链表中环的检测")])]),_._v(" "),r("li",[r("p",[_._v("[ ] 两个有序的链表合并")])]),_._v(" "),r("li",[r("p",[_._v("[ ] 删除链表倒数第 n 个结点")])]),_._v(" "),r("li",[r("p",[_._v("[ ] 求链表的中间结点")])])]),_._v(" "),r("h2",{attrs:{id:"栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[_._v("#")]),_._v(" 栈")]),_._v(" "),r("p",[_._v("先进后出"),r("br"),_._v("\n用数组实现的栈，我们叫作顺序栈，用链表实现的栈，我们叫作链式栈。"),r("br"),_._v("\n栈是一种操作受限的数据结构，只支持入栈和出栈操作。后进先出是它最大的特点。栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。除此之外，我们还讲了一种支持动态扩容的顺序栈，你需要重点掌握它的均摊时间复杂度分析方法。")]),_._v(" "),r("h4",{attrs:{id:"应用-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用-3"}},[_._v("#")]),_._v(" 应用")]),_._v(" "),r("p",[_._v("盘子"),r("br"),_._v("\n函数调用栈"),r("br"),_._v("\n算术表达式"),r("br"),_._v("\n检查字符串中括号否合法"),r("br"),_._v("\n浏览器的前进后退")]),_._v(" "),r("h4",{attrs:{id:"问题-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题-3"}},[_._v("#")]),_._v(" 问题")]),_._v(" "),r("ul",[r("li",[_._v("[ ] 我们在讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？")])]),_._v(" "),r("h4",{attrs:{id:"思考-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思考-4"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),r("h2",{attrs:{id:"xxx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xxx"}},[_._v("#")]),_._v(" xxx")]),_._v(" "),r("h4",{attrs:{id:"应用-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用-4"}},[_._v("#")]),_._v(" 应用")]),_._v(" "),r("h4",{attrs:{id:"问题-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题-4"}},[_._v("#")]),_._v(" 问题")]),_._v(" "),r("h4",{attrs:{id:"思考-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思考-5"}},[_._v("#")]),_._v(" 思考")])])}),[],!1,null,null,null);v.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{547:function(t,v,_){"use strict";_.r(v);var r=_(44),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"typescript"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[t._v("#")]),t._v(" TypeScript")]),t._v(" "),_("h2",{attrs:{id:"问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),_("ul",[_("li",[t._v("[x] 什么是类型兼容？")]),t._v(" "),_("li",[t._v("[x] 异构是什么概念？(可以理解过多种模式混用)")]),t._v(" "),_("li",[t._v("[x] \bC、C++是强类型还是弱类型？（两者都属于弱类型静态语言，"),_("a",{attrs:{href:"https://www.zhihu.com/question/19918532",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),_("OutboundLink")],1),t._v("）")]),t._v(" "),_("li",[t._v("[x] void与never类型的区别。（"),_("a",{attrs:{href:"https://www.zhihu.com/question/354601204",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript中的never类型具体有什么用？"),_("OutboundLink")],1),t._v("）")]),t._v(" "),_("li",[t._v("[x] 构造函数设置private后还能干什么？意义何在？（那只能使用静态类型了，例如Math不可以new，也不可以继承）")]),t._v(" "),_("li",[t._v("[x] 抽象类与接口的关系")]),t._v(" "),_("li",[t._v("[x] 再次学习ES6的《Module 的加载实现》（等到JS学习计划再看）")]),t._v(" "),_("li",[t._v("[ ] 如何将一个文件默认一个命名空间，否则不同文件间存在命名冲突或者默认的声明合并。")]),t._v(" "),_("li",[t._v("[ ] 感觉抽象类的作用不大，我们可以使用接口来约束")]),t._v(" "),_("li",[t._v("[ ] ts 函数兼容 参数多兼容少，为什么这么设计？(可以转化为为什么函数在实现定义接口时参数为什么不能多余定义的参数个数)")]),t._v(" "),_("li",[t._v("[ ] 再次看高级类型，实现高级类型的代码与笔记")]),t._v(" "),_("li",[t._v("[ ] babel工程配置成web服务")]),t._v(" "),_("li",[t._v("[ ] 配置好代码检查工具")]),t._v(" "),_("li",[t._v("[ ] 单元测试的章节")]),t._v(" "),_("li",[t._v("[ ] 构建思维导图")]),t._v(" "),_("li",[t._v("[ ] 做完课后的题目")]),t._v(" "),_("li",[t._v("[ ] 使用class怎么给类的原型添加方法?")])]),t._v(" "),_("hr"),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"基础篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础篇"}},[t._v("#")]),t._v(" 基础篇")]),t._v(" "),_("h3",{attrs:{id:"强类型与弱类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强类型与弱类型"}},[t._v("#")]),t._v(" 强类型与弱类型")]),t._v(" "),_("p",[_("strong",[t._v("强类型语言")]),_("br"),t._v("\n在强类型语言中，当一个对象从调用函数传递到被调用函数时其类型必须与被调用函数中声明的类型兼容。")]),t._v(" "),_("p",[t._v("不允许改变变量的数据类型。")]),t._v(" "),_("p",[_("strong",[t._v("弱类型语言")]),_("br"),t._v("\n变量可以被赋予不同的数据类型。")]),t._v(" "),_("h3",{attrs:{id:"动态类型语言与静态类型语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态类型语言与静态类型语言"}},[t._v("#")]),t._v(" 动态类型语言与静态类型语言")]),t._v(" "),_("p",[t._v("静态：编译阶段确定所有变量的类型，存储偏移量"),_("br"),t._v("\n动态：执行阶段确定所有变量的类型，存储偏移量与属性名")]),t._v(" "),_("ul",[_("li",[t._v("静态强类型：Java、C#、TypeScript")]),t._v(" "),_("li",[t._v("静态弱类型：")]),t._v(" "),_("li",[t._v("动态强类型：Python")]),t._v(" "),_("li",[t._v("动态弱类型：PHP、JavaScript")])]),t._v(" "),_("h3",{attrs:{id:"环境配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[t._v("#")]),t._v(" 环境配置")]),t._v(" "),_("p",[t._v("注意依赖的版本")]),t._v(" "),_("h3",{attrs:{id:"基本类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),_("ul",[_("li",[t._v("void")]),t._v(" "),_("li",[t._v("any")]),t._v(" "),_("li",[t._v("never")]),t._v(" "),_("li",[t._v("Tuple 元组")]),t._v(" "),_("li",[t._v("Enum 枚举")]),t._v(" "),_("li",[t._v("高阶类型")])]),t._v(" "),_("p",[t._v("类型注解相当于JAVA中的类型声明")]),t._v(" "),_("h3",{attrs:{id:"枚举类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[t._v("#")]),t._v(" 枚举类型")]),t._v(" "),_("ul",[_("li",[t._v("数字类型的枚举实现原理：反向映射")]),t._v(" "),_("li",[t._v("枚举会被编译为对象")]),t._v(" "),_("li",[t._v("枚举的值不可修改")]),t._v(" "),_("li",[t._v("枚举的类型（不相同枚举类型不能比较）\n"),_("ul",[_("li",[t._v("const: 编译时计算出结果，以常量形式出现在运行时")]),t._v(" "),_("li",[t._v("computed: 运行时计算，以表达式出现在运行时")])])]),t._v(" "),_("li",[t._v("常量枚举: 会在编译阶段被移除、不需要变量而只是需要变量的值")])]),t._v(" "),_("h3",{attrs:{id:"接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),_("p",[t._v("可以用来约束对象、函数以及类的结构和类型"),_("br"),t._v("\n接口默认遵循鸭子类型原则：实现只需要兼容（满足定义的必要条件）定义的接口即可。"),_("br"),t._v("\n但是上述的情况如果传入对象字面量，会对每个字段进行检查，解决方法有三种。")]),t._v(" "),_("ul",[_("li",[t._v("类型断言")]),t._v(" "),_("li",[t._v("把对象字面量赋值给一个变量，变量作为接口的实现")]),t._v(" "),_("li",[t._v("字符串索引签名："),_("code",[t._v("[x: string]: any")])])]),t._v(" "),_("p",[t._v("可选属性："),_("code",[t._v("age?: number")]),_("br"),t._v("\n只读属性："),_("code",[t._v("readonly id: number")])]),t._v(" "),_("p",[_("strong",[t._v("可索引类型的接口")]),_("br"),t._v("\n可以用来定义不确定属性个数的接口。")]),t._v(" "),_("p",[_("strong",[t._v("函数类型接口")])]),t._v(" "),_("h3",{attrs:{id:"类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),_("p",[_("strong",[t._v("类的修饰符")]),_("br"),t._v("\npublic(公共):")]),t._v(" "),_("ul",[_("li",[t._v("类的所有属性默认都是")]),t._v(" "),_("li",[t._v("构造函数的参数：作用是将参数变成了实例的属性")])]),t._v(" "),_("p",[t._v("private(私有):")]),t._v(" "),_("ul",[_("li",[t._v("类的私有成员只能在类的内部调用，不能被类的实例、类的子类调用")]),t._v(" "),_("li",[t._v("构造函数：这个类既不能被实例化也不能被继承。")])]),t._v(" "),_("p",[t._v("protected(受保护成员):")]),t._v(" "),_("ul",[_("li",[t._v("一个受保护成员只能在类或子类中访问，不能在类的实例中访问")]),t._v(" "),_("li",[t._v("构造函数：不能被实例化，只能被继承，相当于声明了一个基类")])]),t._v(" "),_("p",[t._v("readonly(只读):")]),t._v(" "),_("ul",[_("li",[t._v("必须要初始化")])]),t._v(" "),_("p",[t._v("static(静态成员):")]),t._v(" "),_("ul",[_("li",[t._v("只能通过类名访问，不能通过实例访问")])]),t._v(" "),_("p",[_("strong",[t._v("抽象类")]),_("br"),t._v("\n只能被继承而不能被实例化的类。"),_("br"),t._v("\n抽象类是一种特殊的类，用来约束类。")]),t._v(" "),_("h3",{attrs:{id:"类与接口的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类与接口的关系"}},[t._v("#")]),t._v(" 类与接口的关系")]),t._v(" "),_("p",[t._v("一个接口可以约束类成员有哪些属性，以及他们的类型。"),_("br"),t._v("\n类实现接口的时候必须实现接口中声明的所有属性。"),_("br"),t._v("\n接口只能约束类的共有成员，不能约束构造函数。"),_("br"),t._v("\n接口可以继承，并且一个接口可以继承多个接口。"),_("br"),t._v("\n接口可以继承类，把类的成员都抽象出来，只有类的结构，没有具体实现。")]),t._v(" "),_("p",[t._v("接口和类的区别：")]),t._v(" "),_("ul",[_("li",[t._v("接口可以继承多个接口，类只能继承一个类")]),t._v(" "),_("li",[t._v("类是对象(实例)的抽象，接口是类的抽象")]),t._v(" "),_("li",[t._v("接口可以直接实例化（这里不应该叫实例化，或者说可以直接以接口的模版创建对象），类必须使用 new 操作符。")])]),t._v(" "),_("h3",{attrs:{id:"泛型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),_("p",[t._v("函数输入类型与返回类型的关系约束。"),_("br"),t._v("\n泛型：不预先确定的数据类型，具体的类型在使用的时候才能确定。")]),t._v(" "),_("p",[t._v("不能应用于类的静态成员。"),_("br"),t._v("\n使用泛型可以使类或函数轻松的支持多种类型，增强程序的扩展性。"),_("br"),t._v("\n不必写多条重载，冗长的联合类型声明，增强代码可读性"),_("br"),t._v("\n灵活控制类型之间的约束")]),t._v(" "),_("h3",{attrs:{id:"类型推断"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[t._v("#")]),t._v(" 类型推断")]),t._v(" "),_("p",[t._v("有时不需要主动提供数据的类型,TS会根据相应的规则自动的为其推断出一个类型。")]),t._v(" "),_("ul",[_("li",[t._v("基础类型推断：从右到左")]),t._v(" "),_("li",[t._v("最佳通用类型推断：最小化的兼容类型")]),t._v(" "),_("li",[t._v("上下文类型推断：从左到右")])]),t._v(" "),_("p",[t._v("TS推断不出的类型可以使用类型断言。")]),t._v(" "),_("h3",{attrs:{id:"类型兼容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容"}},[t._v("#")]),t._v(" 类型兼容")]),t._v(" "),_("p",[t._v("当一个类型Y可以被赋值给另一个类型X时，我们就可以说类型X兼容类型Y。"),_("br"),t._v(" "),_("code",[t._v("X = Y")]),t._v(" => "),_("code",[t._v("X 兼容 Y")])]),t._v(" "),_("p",[t._v("兼容可以理解为："),_("br"),t._v("\n我兼容你，即我能包容你，我所必须的你都有，你多出的我不在乎。"),_("br"),t._v("\n相反你所必须的我满足不了，那我不兼容你。")]),t._v(" "),_("p",[t._v("技巧：")]),t._v(" "),_("ul",[_("li",[t._v("对象、接口、类和参数返回值，少的兼容多的")]),t._v(" "),_("li",[t._v("函数参数多的兼容少的")])]),t._v(" "),_("h3",{attrs:{id:"类型保护"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型保护"}},[t._v("#")]),t._v(" 类型保护")]),t._v(" "),_("p",[t._v("TS能够在特定的区块中保证变量属于某种确定的类型"),_("br"),t._v("\n大概的意思是TS可以通过用户的辅助判断进行数据类型的断言，即判断该参数的类型。")]),t._v(" "),_("h3",{attrs:{id:"交叉类型与联合类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型与联合类型"}},[t._v("#")]),t._v(" 交叉类型与联合类型")]),t._v(" "),_("p",[t._v("目的是为了保证语言的灵活性引入的语言特性。"),_("br"),t._v(" "),_("strong",[t._v("交叉类型")]),_("br"),t._v("\n取并集"),_("br"),t._v("\n将多个类型合并为一个类型，新类型将具有所有类型的特性。")]),t._v(" "),_("p",[_("strong",[t._v("联合类型")]),_("br"),t._v("\n取交集"),_("br"),t._v("\n声明的类型并不确定，可以是多个类型中的一个"),_("br"),t._v("\n如果一个对象是联合类型，在类型未确定的情况下，只能访问所有类型的共有成员。")]),t._v(" "),_("p",[_("strong",[t._v("可区分的联合类型")]),_("br"),t._v("\n一个类型如果是多个类型的联合类型，并且每个类型之间有一个共有的方法。")]),t._v(" "),_("hr"),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"工程篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工程篇"}},[t._v("#")]),t._v(" 工程篇")]),t._v(" "),_("h3",{attrs:{id:"es6与commonjs模块系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#es6与commonjs模块系统"}},[t._v("#")]),t._v(" ES6与CommonJS模块系统")]),t._v(" "),_("p",[t._v("两者之间存在兼容问题。"),_("br"),t._v("\nES Module支持"),_("code",[t._v("export default")]),t._v("导出与单独导出共存，而CommonJS顶级导出和单独导出只能二选一，所以ES Module会被编译为"),_("code",[t._v("exports.default")]),t._v("。全部使用ES Module不会出现问题。"),_("br"),t._v("\n当使用ES Module的default默认导出，使用CommonJS的默认导入时会出现问题。")]),t._v(" "),_("h3",{attrs:{id:"命名空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[t._v("#")]),t._v(" 命名空间")]),t._v(" "),_("p",[t._v("命名空间和模块不要混用，不要在模块中使用命名空间，最好在一个全局环境中使用。"),_("br"),t._v("\n本质上是一个闭包，现在使用的概率很小。")]),t._v(" "),_("h3",{attrs:{id:"声明合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#声明合并"}},[t._v("#")]),t._v(" 声明合并")]),t._v(" "),_("p",[t._v("多个地方（跨文件）定义的声明会被自动合并，最好不要使用。"),_("br"),t._v("\n因为一般不会使用命名空间，所以平时只需注意接口的命名合并即可。")]),t._v(" "),_("h3",{attrs:{id:"如何编写声明文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何编写声明文件"}},[t._v("#")]),t._v(" 如何编写声明文件")]),t._v(" "),_("p",[t._v("使用非TS编写的类库时，必须编写一个声明文件，暴露其API。")]),t._v(" "),_("h3",{attrs:{id:"配置tsconfig-json-文件选项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置tsconfig-json-文件选项"}},[t._v("#")]),t._v(" 配置tsconfig.json 文件选项")]),t._v(" "),_("h3",{attrs:{id:"配置tsconfig-json-编译选项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置tsconfig-json-编译选项"}},[t._v("#")]),t._v(" 配置tsconfig.json 编译选项")]),t._v(" "),_("h3",{attrs:{id:"配置tsconfig-json-工具引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置tsconfig-json-工具引用"}},[t._v("#")]),t._v(" 配置tsconfig.json 工具引用")]),t._v(" "),_("h3",{attrs:{id:"从ts-loader到babel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从ts-loader到babel"}},[t._v("#")]),t._v(" 从ts-loader到Babel")]),t._v(" "),_("p",[t._v("开启ts-loader的transpileOnly影响没法在编译时检查类型，关闭影响性能。"),_("br"),t._v("\n使用fork-ts-checker-webpack-plugin插件可以解决。"),_("br"),t._v("\nawesome-typescript-loader可以替代ts-loader，优点是更适合与Babel集成。"),_("br"),t._v("\n但还是建议使用ts-loader编译。")]),t._v(" "),_("p",[t._v("TSC与Babel的区别是Babel的插件丰富。Babel7以后支持TS")]),t._v(" "),_("p",[_("strong",[t._v("Babel")]),_("br"),t._v("\nBabel有四种无法编译的TS语法。")]),t._v(" "),_("p",[t._v("总结："),_("br"),t._v("\n首选TS的默认自身的编译器，ts-loader"),_("br"),t._v("\n如果项目中已经使用了Babel，则安装"),_("code",[t._v("@babel/preset-typescript")]),t._v("，可配合tsc做类型检查"),_("br"),t._v("\n两种编译方式不要混用")]),t._v(" "),_("h3",{attrs:{id:"代码检查工具"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码检查工具"}},[t._v("#")]),t._v(" 代码检查工具")]),t._v(" "),_("p",[t._v("官方开发重点以从TSLint迁移到ESLint。"),_("br"),t._v("\nTSLint的AST与ESLint语法输不兼容，使用typescript-eslint，将TS语法树转化为ESLint语法树")]),t._v(" "),_("p",[t._v("babel-eslint支持TS没有的额外语法检查，抛弃TS，不支持类型检查"),_("br"),t._v("\ntypescript-eslint基于TS的AST，支持创建基于类型信息的规则。"),_("br"),t._v("\n两者不要一起使用，babel体系建议使用babel-eslint 否则使用typescript-eslint")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("eslint")])]),t._v(" "),_("li",[_("p",[t._v("@typescript-eslint/eslint-plugin")])]),t._v(" "),_("li",[_("p",[t._v("@typescript-eslint/parser")])]),t._v(" "),_("li",[_("p",[t._v("@types/jest")])]),t._v(" "),_("li",[_("p",[t._v("@types/jquery")])]),t._v(" "),_("li",[_("p",[t._v("@types/source-map")])]),t._v(" "),_("li",[_("p",[t._v("awesome-typescript-loader")])]),t._v(" "),_("li",[_("p",[t._v("fork-ts-checker-webpack-plugin")])]),t._v(" "),_("li",[_("p",[t._v("jest")])]),t._v(" "),_("li",[_("p",[t._v("ts-jest")])]),t._v(" "),_("li",[_("p",[t._v("ts-loader")])]),t._v(" "),_("li",[_("p",[t._v("typescript")])])]),t._v(" "),_("hr"),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("jsx配置项目")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("preserve: 生成的代码保留jsx，用于后续操作")])]),t._v(" "),_("li",[_("p",[t._v("react-native")])]),t._v(" "),_("li",[_("p",[t._v("react: js")])]),t._v(" "),_("li",[_("p",[t._v("[ ] React预定义的类型")])])]),t._v(" "),_("p",[t._v("babel-plugin-import: antd按需加载"),_("br"),t._v("\ncustomize-cra、react-app-rewired: 自定义react-create-app")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("npm i antd axios react-router-dom\nnpm i -D babel-plugin-import customize-cra react-app-rewired http-server http-proxy-middleware\n")])])]),_("p",[t._v("React.FC："),_("br"),t._v("\n1、参数中隐含children"),_("br"),t._v("\n2、定义静态属性时提示")]),t._v(" "),_("p",[t._v("使用FC后，现在的默认属性必须设置可选，不建议使用FC。")]),t._v(" "),_("p",[t._v("数据请求的数据格式应该定义成接口")]),t._v(" "),_("p",[t._v("React.Types")]),t._v(" "),_("ul",[_("li",[t._v("React.FC: react 函数组件")]),t._v(" "),_("li",[t._v("React.ComponentType: react组件")]),t._v(" "),_("li",[t._v("React.FormEvent: 表单事件（泛型接口）")]),t._v(" "),_("li",[t._v("HTMLInputElement: input")]),t._v(" "),_("li")]),t._v(" "),_("hr"),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"完成统计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完成统计"}},[t._v("#")]),t._v(" 完成统计")]),t._v(" "),_("p",[t._v("❓: 从未看过"),_("br"),t._v("\n❗️: 重点"),_("br"),t._v("\n🔁: 需要再次观看")]),t._v(" "),_("ul",[_("li",[t._v("第一章：基础篇 (21讲)\n"),_("ul",[_("li",[_("ol",[_("li",[t._v("重塑“类型思维”")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"2"}},[_("li",[t._v("类型基础（1）：强类型与弱类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"3"}},[_("li",[t._v("类型基础（2）：动态类型与静态类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"4"}},[_("li",[t._v("编写你的第一个TypeScript程序")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"5"}},[_("li",[t._v("❗️基本类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"6"}},[_("li",[t._v("❗️枚举类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"7"}},[_("li",[t._v("❗️接口（1）：对象类型接口")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"8"}},[_("li",[t._v("❗️接口（2）：函数类型接口")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"9"}},[_("li",[t._v("❗️函数相关知识点梳理")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"10"}},[_("li",[t._v("❗️类（1）：继承和成员修饰符")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"11"}},[_("li",[t._v("❗️类（2）：抽象类与多态")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"12"}},[_("li",[t._v("❗️类与接口的关系")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"13"}},[_("li",[t._v("❗️泛型（1）：泛型函数与泛型接口")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"14"}},[_("li",[t._v("❗️泛型（2）：泛型类与泛型约束")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"15"}},[_("li",[t._v("❗️类型检查机制（1）：类型推断")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"16"}},[_("li",[t._v("❗️类型检查机制（2）：类型兼容性")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"17"}},[_("li",[t._v("❗️类型检查机制（3）：类型保护")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"18"}},[_("li",[t._v("❗️高级类型（1）：交叉类型与联合类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"19"}},[_("li",[t._v("❗️高级类型（2）：索引类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"20"}},[_("li",[t._v("❗️高级类型（3）：映射类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"21"}},[_("li",[t._v("❗️高级类型（4）：条件类型")])])])])]),t._v(" "),_("li",[t._v("第二章：工程篇 (10讲)\n"),_("ul",[_("li",[_("ol",{attrs:{start:"22"}},[_("li",[t._v("❗️ES6与CommonJS的模块系统")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"23"}},[_("li",[t._v("使用命名空间")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"24"}},[_("li",[t._v("❗️理解声明合并")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"25"}},[_("li",[t._v("如何编写声明文件")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"26"}},[_("li",[t._v("🔁配置tsconfig.json（1）：文件选项")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"27"}},[_("li",[t._v("🔁配置tsconfig.json（2）：编译选项")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"28"}},[_("li",[t._v("🔁配置tsconfig.json（3）：工程引用")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"29"}},[_("li",[t._v("🔁编译工具：从ts-loader到Babel")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"30"}},[_("li",[t._v("🔁代码检查工具：从TSLint到ESLint")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"31"}},[_("li",[t._v("🔁使用Jest进行单元测试")])])])])]),t._v(" "),_("li",[t._v("第三章：实战篇 (16讲)\n"),_("ul",[_("li",[_("ol",{attrs:{start:"32"}},[_("li",[t._v("创建项目")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"33"}},[_("li",[t._v("组件与类型（1）：函数组件与类组件")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"34"}},[_("li",[t._v("组件与类型（2）：高阶组件与Hooks")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"35"}},[_("li",[t._v("事件处理与数据请求")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"36"}},[_("li",[t._v("列表渲染与路由")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"37"}},[_("li",[t._v("❓🔁Redux与类型")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"38"}},[_("li",[t._v("❓搭建服务端开发环境")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"39"}},[_("li",[t._v("❓列表的CRUD")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"40"}},[_("li",[t._v("❓导出Excel")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"41"}},[_("li",[t._v("❓搭建Vue开发环境")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"42"}},[_("li",[t._v("❓组件封装")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"43"}},[_("li",[t._v("❓组件发布")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"44"}},[_("li",[t._v("❓共存策略")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"45"}},[_("li",[t._v("❓宽松策略")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"46"}},[_("li",[t._v("❓严格策略")])])]),t._v(" "),_("li",[_("ol",{attrs:{start:"47"}},[_("li",[t._v("结课测试&结束语")])])])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);
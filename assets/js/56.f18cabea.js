(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{421:function(t,v,r){"use strict";r.r(v);var _=r(44),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("[toc]")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"概览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),r("p",[t._v("Array是一种特殊的对象，因为是对象所以可以给其加入其他属性。"),r("br"),t._v("\n使用delete会产生空位，而且不会影响数组长度"),r("br"),t._v("\n因为健必须为字符串，所以arr[0]中0被自动转为字符串。"),r("br"),t._v("\n如果数组有对象，存储的是对象的地址(浅拷贝)")]),t._v(" "),r("h2",{attrs:{id:"es6-增加了哪些特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6-增加了哪些特性"}},[t._v("#")]),t._v(" ES6 增加了哪些特性")]),t._v(" "),r("ul",[r("li",[t._v("扩展运算符"),r("code",[t._v("...")]),t._v(" "),r("ul",[r("li",[t._v("扩展运算符背后调用的是遍历器接口（Symbol.iterator）")]),t._v(" "),r("li",[t._v("用法\n"),r("ul",[r("li",[t._v("复制数组")]),t._v(" "),r("li",[t._v("合并数组")]),t._v(" "),r("li",[t._v("与解构赋值结合")]),t._v(" "),r("li",[t._v("将字符串转为数组")]),t._v(" "),r("li",[t._v("实现了 Iterator 接口的对象（类数组对象并不能）")]),t._v(" "),r("li",[t._v("同上一条，Map、Set和Generator函数返回值可转化为数组")])])])])]),t._v(" "),r("li",[t._v("Array.from()\n"),r("ul",[r("li",[t._v("将类数组对象和可遍历（iterable）的对象转换成真正的数组")]),t._v(" "),r("li",[t._v("还可以接受第二个参数，作用类似于数组的map方法")])])]),t._v(" "),r("li",[t._v("Array.of()\n"),r("ul",[r("li",[t._v("将一组值，转换为数组")])])]),t._v(" "),r("li",[t._v("copyWithin()\n"),r("ul",[r("li",[t._v("将指定位置的成员复制到其他位置（会覆盖原有成员）")])])]),t._v(" "),r("li",[t._v("find()与findIndex()\n"),r("ul",[r("li",[t._v("查找到某值，返回该值或者该值的位置")]),t._v(" "),r("li",[t._v("可识别NaN")])])]),t._v(" "),r("li",[t._v("fill()\n"),r("ul",[r("li",[t._v("填充数组")])])]),t._v(" "),r("li",[t._v("entries()，keys() 和 values()\n"),r("ul",[r("li",[t._v("返回一个遍历器对象")]),t._v(" "),r("li",[t._v("分别返回，键值对、健、值")])])]),t._v(" "),r("li",[t._v("includes()\n"),r("ul",[r("li",[t._v("搜索值，返回布尔类型")]),t._v(" "),r("li",[t._v("可识别NaN")])])]),t._v(" "),r("li",[t._v("flat()，flatMap()\n"),r("ul",[r("li",[t._v("将数组拉平（多维数组变成一维）")]),t._v(" "),r("li",[t._v("接受参数，表示拉平的层级")]),t._v(" "),r("li",[t._v("flatMap()方法对原数组的每个成员执行一个函数")])])]),t._v(" "),r("li",[t._v("数组的空位\n"),r("ul",[r("li",[t._v("ES5大多数方法会忽略空位，ES6 的方法则是明确将空位转为undefined")]),t._v(" "),r("li",[t._v("最好不要出现空位的情况")])])]),t._v(" "),r("li",[t._v("排序\n"),r("ul",[r("li",[t._v("默认排序算法必须稳定")])])])]),t._v(" "),r("h2",{attrs:{id:"问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),r("ul",[r("li",[t._v("[x] 什么是可遍历对象")]),t._v(" "),r("li",[t._v("[x] 哪些方法会改变原数组⚠️（调用对象）")]),t._v(" "),r("li",[t._v("[x] 空位是什么，哪些方法会忽略，哪些不会？")]),t._v(" "),r("li",[t._v("[x] 字符串和数组有哪些相同的方法名？有什么共同点？")]),t._v(" "),r("li",[t._v("[x] 什么是类数组对象？它可以使用哪些数组方法？")]),t._v(" "),r("li",[t._v("[ ] 类数组对象和Iterator的区别")]),t._v(" "),r("li",[t._v("[ ] 什么是稳定排序，什么是不稳定排序")])]),t._v(" "),r("h2",{attrs:{id:"问题解答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题解答"}},[t._v("#")]),t._v(" 问题解答")]),t._v(" "),r("h3",{attrs:{id:"类数组对象和iterator的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类数组对象和iterator的区别"}},[t._v("#")]),t._v(" 类数组对象和Iterator的区别")]),t._v(" "),r("p",[t._v("类数组对象本质特征只有一点，即必须有length属性。但是一般情况下其他属性值的健都是数字字符，且length等于这些健值对的个数。")]),t._v(" "),r("h3",{attrs:{id:"字符串和数组有哪些相同的方法名-有什么共同点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串和数组有哪些相同的方法名-有什么共同点"}},[t._v("#")]),t._v(" 字符串和数组有哪些相同的方法名？有什么共同点？")]),t._v(" "),r("p",[t._v("可以把字符串看成一种特殊的数组（特定序列的字符），字符串与数组有许多名字相同的方法")]),t._v(" "),r("ul",[r("li",[t._v("concat: 连接两个数组（字符串）")]),t._v(" "),r("li",[t._v("indexOf: 返回搜索的元素在数组（字符串）中的位置")]),t._v(" "),r("li",[t._v("includes: 搜索数组（字符串）中是否有xx值，返回布尔值")]),t._v(" "),r("li",[t._v("lastIndexOf: 与indexOf类似，从后向前搜")]),t._v(" "),r("li",[t._v("slice: "),r("code",[t._v("(start, end)")]),t._v("，提取其中的一段，不包含终止位置end，支持负数")])]),t._v(" "),r("p",[t._v("易混的方法："),r("br"),t._v(" "),r("strong",[t._v("字符串")]),r("br"),t._v("\nslice: "),r("code",[t._v("(start, end)")]),t._v("，提取其中的一段，不包含终止位置end，支持负数"),r("br"),t._v("\nsplit: "),r("code",[t._v("(str | reg, length)")]),t._v("用String或RegExp切割字符串，返回数组，第二个参数是数组长度")]),t._v(" "),r("p",[r("strong",[t._v("数组")]),r("br"),t._v("\nslice: "),r("code",[t._v("(start, end)")]),t._v("，提取其中的一段，不包括终止位置end，支持负数"),r("br"),t._v("\nsplice: "),r("code",[t._v("(start, count, val1, val2, val3...)")]),t._v("从start位置向后删除count个数，添加val1,val2,val3...")]),t._v(" "),r("h3",{attrs:{id:"什么是类数组对象-它可以使用哪些数组方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是类数组对象-它可以使用哪些数组方法"}},[t._v("#")]),t._v(" 什么是类数组对象？它可以使用哪些数组方法？")]),t._v(" "),r("p",[t._v("如果一个对象的所有键名都是正整数或零，并且有length属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）。"),r("br"),t._v("\n类数组对象有")]),t._v(" "),r("ul",[r("li",[t._v("函数参数的arguments对象")]),t._v(" "),r("li",[t._v("DOM元素集（document.getElementByTagName('div')）")]),t._v(" "),r("li",[t._v("字符串")])]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orange'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    length"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['apple', 'orange', 'banana']")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("h3",{attrs:{id:"空位是什么-哪些方法会忽略-哪些不会"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空位是什么-哪些方法会忽略-哪些不会"}},[t._v("#")]),t._v(" 空位是什么，哪些方法会忽略，哪些不会？")]),t._v(" "),r("p",[t._v("使用Array()、new Array()或delete都可以产生空位，空位和undefined是不同的概念"),r("br"),t._v("\n使用consolel.log()空位在控制台中打印显示empty"),r("br"),t._v(" "),r("strong",[t._v("ES5中的方法大多数情况下会忽略空位")]),r("br"),t._v(" "),r("strong",[t._v("ES6中的方法会遍历空位且将其值识别为undefined")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("forEach(), filter(), reduce(), every() 和some()都会跳过空位。")])]),t._v(" "),r("li",[r("p",[t._v("map()会跳过空位，但会保留这个值")])]),t._v(" "),r("li",[r("p",[t._v("join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。")])]),t._v(" "),r("li",[r("p",[t._v("Array.from、...运算符、entries()、keys()、values()、find()和findIndex()会将空位处理成undefined")])]),t._v(" "),r("li",[r("p",[t._v("copyWithin()会连空位一起拷贝。")])]),t._v(" "),r("li",[r("p",[t._v("fill()会将空位视为正常的数组位置。")])]),t._v(" "),r("li",[r("p",[t._v("for...of循环也会遍历空位，当作undefined处理")])])]),t._v(" "),r("p",[r("strong",[t._v("应该避免出现空位")])]),t._v(" "),r("h2",{attrs:{id:"api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("方法(6⃣️ === ES6)")]),t._v(" "),r("th",[t._v("描述")]),t._v(" "),r("th",[t._v("分类")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("new Array(val) 或 Array(val)")]),t._v(" "),r("td",[t._v("不建议使用这种方式"),r("br"),t._v("无参数：空数组"),r("br"),t._v("正整数：长度为val的数组"),r("br"),t._v("非正整数：报错"),r("br"),t._v("非数值：[...val]")]),t._v(" "),r("td",[t._v("静态方法")])]),t._v(" "),r("tr",[r("td",[t._v("Array.isArray()")]),t._v(" "),r("td",[t._v("是否是数组，返回布尔值")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.from(arrayLike, funMap)")]),t._v(" "),r("td",[t._v("将类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）转成真正的数组"),r("br"),t._v("类似[...arguments]或[].slice.call(document.querySelectorAll('div'))"),r("br"),t._v("Array.from还可以接受第二个参数，作用类似于数组的map方法"),r("br"),t._v("还可以传入Array.from的第三个参数，用来绑定this。")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.of()")]),t._v(" "),r("td",[t._v("Array.of方法用于将一组值，转换为数组。"),r("br"),t._v("基本上可以用来替代Array()或new Array()弥补参数不同产生的差异")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.length")]),t._v(" "),r("td",[t._v("数组长度，最大值为(2^32 -1)"),r("br"),t._v("可写，自动转化为改长度数组")]),t._v(" "),r("td",[t._v("实例属性")])]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.valueOf()")]),t._v(" "),r("td",[t._v("返回自身")]),t._v(" "),r("td",[t._v("实例方法")])]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.toString()")]),t._v(" "),r("td",[t._v("返回数组的字符串表示方式，需要注意二维数组")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.push(...arr)")]),t._v(" "),r("td",[t._v("末端添加，改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.pop()")]),t._v(" "),r("td",[t._v("删除最后一个元素并返回，改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.shift()")]),t._v(" "),r("td",[t._v("删除第一个元素并返回，改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.unshift(...arr)")]),t._v(" "),r("td",[t._v("首端添加，改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.join(sign = ',')")]),t._v(" "),r("td",[t._v("返回以参数sign分割数组后的字符串")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.concat(...arrList)")]),t._v(" "),r("td",[t._v("返回一个合并后的数组")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.reverse(arrList)")]),t._v(" "),r("td",[t._v("颠倒排序，改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.slice(start, end)")]),t._v(" "),r("td",[t._v("提取其中的一段，不包括终止位置end，支持负数")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.splice(start, count, val1, val2, val3...)")]),t._v(" "),r("td",[t._v("从start位置向后删除count个数，添加val1,val2,val3..."),r("br"),t._v("改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.sort(arrList or fun)")]),t._v(" "),r("td",[t._v("支持传入数组(返回升序)或函数"),r("br"),t._v("函数有两个参数，x - y返回的是升序")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.map(fun, that)")]),t._v(" "),r("td",[t._v("把数组的值依次传入函数，返回一个新的数组值"),r("br"),t._v("函数可接收三个参数value, index, arr"),r("br"),t._v("map还可以传入第二个参数，用于绑定函数中this变量"),r("br"),t._v("会跳过空位数组")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.forEach(fun)")]),t._v(" "),r("td",[t._v("与map类似，不返回值")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.filter(fun)")]),t._v(" "),r("td",[t._v("用于过滤数组成员，满足条件的成员组成一个新数组返回。")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.some(fun)")]),t._v(" "),r("td",[t._v("返回一个布尔值，只要有一个数组成员满足条件就返回true")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.every(fun)")]),t._v(" "),r("td",[t._v("返回一个布尔值，必须所有的数组成员满足条件才返回true")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.reduce(fun)")]),t._v(" "),r("td",[t._v("依次执行一个函数，函数返回一个值，作为下次循环的第一个参数，最终返回一个值，可接收四个变量"),r("br"),t._v("累积变量，默认为数组的第一个成员"),r("br"),t._v("当前变量，默认为数组的第二个成员"),r("br"),t._v("当前位置（从0开始）"),r("br"),t._v("原数组")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.reduceRigth(fun)")]),t._v(" "),r("td",[t._v("与reduce类似，从右向左遍历")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.indexOf()")]),t._v(" "),r("td",[t._v("返回给定元素在数组中第一次出现的位置，如果返回-1，则是没有匹配到，可用于搜索"),r("br"),t._v("方法实用===比较，不可用于NaN")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.lastIndexOf()")]),t._v(" "),r("td",[t._v("与indexOf类似，从后向前搜索，使用===，不可用于NaN")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.copyWithin(target, start, end)6⃣️")]),t._v(" "),r("td",[t._v("把从start到end(不包含end)位置的数拷贝到target，粘贴是覆盖式的，拷贝的数量即覆盖的数量。start和end支持负数。"),r("br"),t._v("改变原数组⚠️")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.find(fun)6⃣️")]),t._v(" "),r("td",[t._v("数组实例的find方法，用于找出第一个符合条件的数组成员。"),r("br"),t._v("数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.findIndex(fun)6⃣️")]),t._v(" "),r("td",[t._v("与find类似，只不过最终返回的是符合条件的数组成员的位置"),r("br"),t._v("支持第二个参数，绑定this"),r("br"),t._v("另外，这两个方法都可以发现NaN")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.fill(val, start, end)6⃣️")]),t._v(" "),r("td",[t._v("以val填充数组，浅拷贝")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.keys()6⃣️")]),t._v(" "),r("td",[t._v("返回一个遍历器对象Iterator，可以用for...of循环进行遍历"),r("br"),t._v("返回键名")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.values()6⃣️")]),t._v(" "),r("td",[t._v("返回键值")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.entries()6⃣️")]),t._v(" "),r("td",[t._v("返回键值对")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("Array.prototype.includes(val, start, )6⃣️")]),t._v(" "),r("td",[t._v("与字符串的includes类似，搜索数组中是否有既定的值，返回布尔值"),r("br"),t._v("对indexOf的补充，可用于NaN")]),t._v(" "),r("td")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);